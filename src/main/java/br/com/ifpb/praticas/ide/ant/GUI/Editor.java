/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.ifpb.praticas.ide.ant.GUI;

import br.com.ifpb.praticas.ide.ant.backend.ProjectBuilder;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author João Marcos F <joaomarccos.ads@gmail.com>
 * @author Rafael
 *
 */
public class Editor extends javax.swing.JFrame {

    private Component codeArea;
    private String directory_path;
    private ArrayList listOftabsOpen;
    private ProjectBuilder projectBuilder;
    private JTextArea text;

    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.listOftabsOpen = new ArrayList();
        this.menuRun.setEnabled(false);
    }

    public void setProjectBuilder(ProjectBuilder projectBuilder) {
        this.projectBuilder = projectBuilder;
    }

    private void enableMenu() {
        this.menuRun.setEnabled(true);
    }

    /**
     * Método para abrir uma nova guia.
     *
     * @param name
     * @param code
     */
    private void OpenNewTab(String name, String code) {
        JTextArea codes = new JTextArea(code);
        codes.setBackground(new Color(18, 30, 49));
        codes.setForeground(Color.white);
        codes.setCaretColor(Color.WHITE);
        codes.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 13));
        this.text = codes;
        this.codeArea = new JScrollPane(codes);
        this.codeArea.setFont(Font.getFont(Font.MONOSPACED));
        sourceEditor.addTab(name, codeArea);
        sourceEditor.setSelectedComponent(codeArea);
        int i = sourceEditor.getSelectedIndex();
        sourceEditor.setTabComponentAt(i, new ButtonTabComponent(sourceEditor, listOftabsOpen, this));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        sourceEditor = new javax.swing.JTabbedPane();
        labelConsole = new java.awt.Label();
        jScrollPane2 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        openProject = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        menuRun = new javax.swing.JMenu();
        compile = new javax.swing.JMenuItem();
        runProject = new javax.swing.JMenuItem();
        generateJar = new javax.swing.JMenuItem();
        generateWar = new javax.swing.JMenuItem();
        tomcatMenu = new javax.swing.JMenu();
        configureTomcat = new javax.swing.JMenuItem();
        deploy = new javax.swing.JMenuItem();
        startTomCat = new javax.swing.JMenuItem();
        stopTomCat = new javax.swing.JMenuItem();
        mavenMenu = new javax.swing.JMenu();
        mavenCompile = new javax.swing.JMenuItem();
        mavenClean = new javax.swing.JMenuItem();
        mavenInstall = new javax.swing.JMenuItem();
        mavenPackage = new javax.swing.JMenuItem();
        gitMenu = new javax.swing.JMenu();
        addModifications = new javax.swing.JMenuItem();
        commit = new javax.swing.JMenuItem();
        pull = new javax.swing.JMenuItem();
        push = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ant-Ide");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Open files");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        labelConsole.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labelConsole.setText("Output");

        console.setEditable(false);
        console.setColumns(20);
        console.setRows(5);
        jScrollPane2.setViewportView(console);

        menuFile.setText("File");

        openProject.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openProject.setText("Open Project");
        openProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openProjectActionPerformed(evt);
            }
        });
        menuFile.add(openProject);

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        menuFile.add(save);

        menuBar.add(menuFile);

        menuRun.setText("Run");

        compile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        compile.setText("Compile");
        compile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileActionPerformed(evt);
            }
        });
        menuRun.add(compile);

        runProject.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        runProject.setText("Run Project");
        runProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runProjectActionPerformed(evt);
            }
        });
        menuRun.add(runProject);

        generateJar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        generateJar.setText("Generate Jar");
        generateJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateJarActionPerformed(evt);
            }
        });
        menuRun.add(generateJar);

        generateWar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        generateWar.setText("Generate War");
        generateWar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateWarActionPerformed(evt);
            }
        });
        menuRun.add(generateWar);

        tomcatMenu.setText("Tomcat");

        configureTomcat.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, java.awt.event.InputEvent.CTRL_MASK));
        configureTomcat.setText("Configure");
        configureTomcat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configureTomcatActionPerformed(evt);
            }
        });
        tomcatMenu.add(configureTomcat);

        deploy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, java.awt.event.InputEvent.CTRL_MASK));
        deploy.setText("Deploy Web Project");
        deploy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deployActionPerformed(evt);
            }
        });
        tomcatMenu.add(deploy);

        startTomCat.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, java.awt.event.InputEvent.CTRL_MASK));
        startTomCat.setText("Start Server");
        startTomCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTomCatActionPerformed(evt);
            }
        });
        tomcatMenu.add(startTomCat);

        stopTomCat.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, java.awt.event.InputEvent.CTRL_MASK));
        stopTomCat.setText("Stop Server");
        stopTomCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopTomCatActionPerformed(evt);
            }
        });
        tomcatMenu.add(stopTomCat);

        menuRun.add(tomcatMenu);

        mavenMenu.setText("Maven");

        mavenCompile.setText("Compile");
        mavenCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mavenCompileActionPerformed(evt);
            }
        });
        mavenMenu.add(mavenCompile);

        mavenClean.setText("Clean");
        mavenClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mavenCleanActionPerformed(evt);
            }
        });
        mavenMenu.add(mavenClean);

        mavenInstall.setText("Install");
        mavenInstall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mavenInstallActionPerformed(evt);
            }
        });
        mavenMenu.add(mavenInstall);

        mavenPackage.setText("Package");
        mavenPackage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mavenPackageActionPerformed(evt);
            }
        });
        mavenMenu.add(mavenPackage);

        menuRun.add(mavenMenu);

        gitMenu.setText("Git");

        addModifications.setText("Add Modifications");
        addModifications.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addModificationsActionPerformed(evt);
            }
        });
        gitMenu.add(addModifications);

        commit.setText("Commit");
        commit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitActionPerformed(evt);
            }
        });
        gitMenu.add(commit);

        pull.setText("Pull");
        pull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pullActionPerformed(evt);
            }
        });
        gitMenu.add(pull);

        push.setText("Push");
        push.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushActionPerformed(evt);
            }
        });
        gitMenu.add(push);

        menuRun.add(gitMenu);

        menuBar.add(menuRun);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sourceEditor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelConsole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sourceEditor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelConsole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        sourceEditor.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateJarActionPerformed
        Runnable runnable = new Runnable() {

            @Override
            public void run() {
                JOptionPane.showMessageDialog(null, "Selecione a classe principal", "IDE-Ant", JOptionPane.INFORMATION_MESSAGE);
                JFileChooser fc = new JFileChooser(directory_path);
                fc.setMultiSelectionEnabled(false);
                fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int result = fc.showOpenDialog(null);
                String mainClass = null;
                if (result == JFileChooser.APPROVE_OPTION) {
                    mainClass = fc.getSelectedFile().getAbsolutePath();
                    if (!mainClass.endsWith("java")) {
                        JOptionPane.showMessageDialog(null, "É preciso selecionar a classe principal correta!", "IDE-Ant", JOptionPane.ERROR_MESSAGE);
                    } else {
                        try {
                            Path main = Paths.get(mainClass);
                            mainClass = main.getName(main.getNameCount() - 2) + "." + main.getFileName().toString().substring(0, main.getFileName().toString().length() - 5);
                            console.setText(projectBuilder.buildSimpleProject(directory_path, mainClass));
                        } catch (IOException ex) {
                            console.setText(ex.getMessage());
                        }
                    }
                }
            }
        };

        Thread thread = new Thread(runnable);
        thread.start();

    }//GEN-LAST:event_generateJarActionPerformed
    /**
     * Método para fechar a janela
     *
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int caixa = JOptionPane.showConfirmDialog(this, "Você deseja realmente sair?", "Confirmação", JOptionPane.YES_NO_OPTION);
        if (caixa == JOptionPane.YES_OPTION) {
            try {
                projectBuilder.stopTomCat();
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                dispose();
            }
        }
    }//GEN-LAST:event_formWindowClosing
    /**
     * Método pra abrir um diretório
     *
     * @param evt
     */
    private void openProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openProjectActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fc.showOpenDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            directory_path = fc.getSelectedFile().getAbsolutePath();
            jTree1.setModel(new TreeOfDirectories(directory_path));
            try {
                this.projectBuilder.copyBuildXmlToProjectPath(directory_path);
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            enableMenu();
            console.setText("");
        }
    }//GEN-LAST:event_openProjectActionPerformed

    /**
     * Método que recebe um evento de click do mouse em um arquivo, depois lê o
     * texto do arquivo selecionado e faz a chamada do método que abre uma nova
     * aba para a edição.
     *
     * @param evt
     */
    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        if (evt.getClickCount() > 1) {
            File file = (File) jTree1.getLastSelectedPathComponent();
            if (listOftabsOpen.contains(file.getAbsoluteFile())) {
                sourceEditor.grabFocus();
                return;
            }
            listOftabsOpen.add(file.getAbsoluteFile());
            String dados;
            try {
                dados = new String(Files.readAllBytes(file.toPath()));
                OpenNewTab(file.getName(), dados);
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTree1MouseClicked
    public void save() {
        String caminho = listOftabsOpen.get(sourceEditor.getSelectedIndex()).toString();
        File arquivo = new File(caminho);
        try {
            BufferedWriter bf = new BufferedWriter(new FileWriter(arquivo));
            bf.flush();
            bf.write(text.getText());
            bf.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar o arquivo!", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        save();
    }//GEN-LAST:event_saveActionPerformed

    private void compileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileActionPerformed
        Runnable runnable = new Runnable() {

            @Override
            public void run() {
                Path path = Paths.get(directory_path + "src/main/webapp");
                try {
                    if (!Files.exists(path, LinkOption.NOFOLLOW_LINKS)) {
                        console.setText(projectBuilder.compileSimpleProject());
                    } else {
                        console.setText(projectBuilder.compileWebProject());
                    }
                } catch (IOException ex) {
                    console.setText(ex.getMessage());
                }
            }
        };

        Thread thread = new Thread(runnable);
        thread.start();
    }//GEN-LAST:event_compileActionPerformed

    private void runProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runProjectActionPerformed
        console.setText("Executando... Aguarde!");
        Runnable runnable;
        runnable = new Runnable() {

            @Override
            public void run() {
                Path path = Paths.get(directory_path + "/src/main/webapp");
                try {
                    if (!Files.exists(path, LinkOption.NOFOLLOW_LINKS)) {
                        console.setText(projectBuilder.executeJar(directory_path));
                    } else {
                        console.setText(projectBuilder.deployWebProject(directory_path));
                        projectBuilder.startTomCat();
                    }
                } catch (IOException ex) {
                    console.setText(ex.getMessage());
                }
            }
        };

        Thread thread = new Thread(runnable);
        thread.start();
    }//GEN-LAST:event_runProjectActionPerformed

    private void generateWarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateWarActionPerformed
        Runnable runnable = new Runnable() {

            @Override
            public void run() {
                try {
                    console.setText(projectBuilder.buildWebProject(directory_path));
                } catch (IOException ex) {
                    console.setText(ex.getMessage());
                }
            }
        };

        Thread thread = new Thread(runnable);
        thread.start();

    }//GEN-LAST:event_generateWarActionPerformed

    private void deployActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deployActionPerformed
        Runnable runnable = new Runnable() {

            @Override
            public void run() {
                try {
                    console.setText(projectBuilder.deployWebProject(directory_path));
                } catch (IOException ex) {
                    console.setText(ex.getMessage());
                }
            }
        };

        Thread thread = new Thread(runnable);
        thread.start();

    }//GEN-LAST:event_deployActionPerformed

    private void startTomCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTomCatActionPerformed
        Runnable runnable = new Runnable() {

            @Override
            public void run() {
                try {
                    console.setText(projectBuilder.startTomCat());
                } catch (IOException ex) {
                    console.setText(ex.getMessage());
                }
            }
        };

        Thread thread = new Thread(runnable);
        thread.start();
    }//GEN-LAST:event_startTomCatActionPerformed

    private void stopTomCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopTomCatActionPerformed
        Runnable runnable = new Runnable() {

            @Override
            public void run() {
                try {
                    console.setText(projectBuilder.stopTomCat());
                } catch (IOException ex) {
                    console.setText(ex.getMessage());
                }
            }
        };

        Thread thread = new Thread(runnable);
        thread.start();
    }//GEN-LAST:event_stopTomCatActionPerformed

    private void configureTomcatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configureTomcatActionPerformed
        String path = JOptionPane.showInputDialog(this, "Entry tomcat.home path", "tomcat.home Configure", JOptionPane.OK_CANCEL_OPTION);
        try {
            projectBuilder.configureTomcatHome(path);
            console.setText("tomcat.home configured for "+path);
        } catch (IOException ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_configureTomcatActionPerformed
    /**
     * Add all files in Stage Area.
     * @param evt 
     */
    private void addModificationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addModificationsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addModificationsActionPerformed
    /**
     * Commit modifications.
     * @param evt 
     */
    private void commitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitActionPerformed
        String msg = JOptionPane.showInputDialog(this, "Entry commit message:", "Message for commit", JOptionPane.OK_CANCEL_OPTION);
    }//GEN-LAST:event_commitActionPerformed
    /**
     * Makes pull from the online repository.
     * @param evt 
     */
    private void pullActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pullActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pullActionPerformed
    /**
     * Makes push to online repository.
     * @param evt 
     */
    private void pushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pushActionPerformed
    /**
     * Compile project with maven.
     * @param evt 
     */
    private void mavenCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mavenCompileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mavenCompileActionPerformed
    /**
     * Clean the files and directories generated by Maven during its build.
     * @param evt 
     */
    private void mavenCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mavenCleanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mavenCleanActionPerformed
    /**
     * Generate the project deploy package.
     * @param evt 
     */
    private void mavenInstallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mavenInstallActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mavenInstallActionPerformed
    /**
     * Packaging the project as defined in the description.
     * @param evt 
     */
    private void mavenPackageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mavenPackageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mavenPackageActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addModifications;
    private javax.swing.JMenuItem commit;
    private javax.swing.JMenuItem compile;
    private javax.swing.JMenuItem configureTomcat;
    private javax.swing.JTextArea console;
    private javax.swing.JMenuItem deploy;
    private javax.swing.JMenuItem generateJar;
    private javax.swing.JMenuItem generateWar;
    private javax.swing.JMenu gitMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jTree1;
    private java.awt.Label labelConsole;
    private javax.swing.JMenuItem mavenClean;
    private javax.swing.JMenuItem mavenCompile;
    private javax.swing.JMenuItem mavenInstall;
    private javax.swing.JMenu mavenMenu;
    private javax.swing.JMenuItem mavenPackage;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuRun;
    private javax.swing.JMenuItem openProject;
    private javax.swing.JMenuItem pull;
    private javax.swing.JMenuItem push;
    private javax.swing.JMenuItem runProject;
    private javax.swing.JMenuItem save;
    private javax.swing.JTabbedPane sourceEditor;
    private javax.swing.JMenuItem startTomCat;
    private javax.swing.JMenuItem stopTomCat;
    private javax.swing.JMenu tomcatMenu;
    // End of variables declaration//GEN-END:variables
}
